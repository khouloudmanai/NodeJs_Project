<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Connexion</title>
  <style>
    .error-message {
      color: red;
      margin-top: 10px;
    }
    .loading {
      display: none;
    }
  </style>
</head>

<body>
  <h1>Connexion</h1>
  <form id="loginForm">
    <label for="email">Email:</label>
    <input type="email" id="email" name="email" required>
    <br>
    <label for="password">Mot de passe:</label>
    <input type="password" id="password" name="password" required>
    <br>
    <button type="submit">Se connecter</button>
  </form>
  <div id="errorMessage" class="error-message"></div>

  <!-- Indicateur de chargement -->
  <div id="loading" class="loading">Chargement...</div>

  <script>
    // Fonction pour afficher ou masquer le chargement
    function toggleLoading(show) {
      const loading = document.getElementById('loading');
      loading.style.display = show ? 'block' : 'none';
    }

    // Gestion de la soumission du formulaire
    document.getElementById('loginForm').addEventListener('submit', async function(event) {
      event.preventDefault();

      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      const errorMessage = document.getElementById('errorMessage');
      const submitButton = event.target.querySelector('button');
      errorMessage.textContent = ''; // Effacer les messages d'erreur précédents
      submitButton.disabled = true;  // Désactiver le bouton pendant le chargement

      try {
        // Afficher l'indicateur de chargement
        toggleLoading(true);

        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email, password })
        });

        const data = await response.json();

        // Cacher l'indicateur de chargement
        toggleLoading(false);

        if (data.success) {
          // Stocker le token dans localStorage
          localStorage.setItem('token', data.token);

          // Rediriger selon l'URL spécifiée
          window.location.href = data.redirect;
        } else {
          errorMessage.textContent = data.message || 'Identifiants invalides.';
        }
      } catch (error) {
        console.error('Erreur lors de la connexion:', error);
        errorMessage.textContent = 'Une erreur s\'est produite lors de la connexion.';
        toggleLoading(false);
      } finally {
        submitButton.disabled = false;  // Réactiver le bouton après la soumission
      }
    });

    // Fonction pour ajouter l'en-tête Authorization avec le token
   // Fonction pour ajouter automatiquement le token aux requêtes
function addAuthHeader(options = {}) {
  const token = localStorage.getItem('token'); // Récupérer le token depuis localStorage
  if (!options.headers) {
    options.headers = {};
  }
  if (token) {
    options.headers['Authorization'] = `Bearer ${token}`; // Ajouter l'en-tête Authorization
  }
  return options;
}


    // Fonction pour récupérer les rendez-vous protégés
    async function fetchAppointments() {
      try {
        const response = await fetch('/api/appointments', addAuthHeader({ method: 'GET' }));
        const data = await response.json();

        if (response.ok) {
          console.log(' Rendez-vous reçus:', data);
        } else {
          console.error(' Erreur:', data.message);
        }
      } catch (error) {
        console.error(' Erreur lors de la récupération des rendez-vous:', error);
      }
    }

    // Cette fonction doit être appelée après la connexion réussie
    // fetchAppointments();  // Appel de la fonction pour tester la récupération des rendez-vous
  </script>
</body>
</html>
